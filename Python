import requests
import json
import speech_recognition as sr
import pyttsx3
import time

class VoiceInterviewBot:
    def __init__(self):
        # Your OpenRouter-issued key
        self.api_key = "sk-or-v1-43d24a23fcbceabc011824c2ffc2db017efeb8bca2bd5a00058d8e36feb"
        # Use your own OpenAI key via OpenRouter BYOK integration
        self.model = "openai/gpt-3.5-turbo"
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.conversation_history = []

        # Initialize speech recognition and TTS
        self.recognizer = sr.Recognizer()
        self.microphone = None
        self.tts_engine = None

        print("🚀 Initializing Voice Interview Bot...")
        self.setup_voice_components()

    def setup_voice_components(self):
        """Setup microphone and text-to-speech."""
        try:
            self.microphone = sr.Microphone()
            print("✅ Microphone initialized")

            self.tts_engine = pyttsx3.init()
            voices = self.tts_engine.getProperty('voices')
            if len(voices) > 1:
                self.tts_engine.setProperty('voice', voices[1].id)
            rate = self.tts_engine.getProperty('rate')
            self.tts_engine.setProperty('rate', rate - 30)
            self.tts_engine.setProperty('volume', 0.9)
            print("✅ Text-to-speech initialized")

            print("🎙️  Calibrating microphone... (stay quiet)")
            with self.microphone as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=2)
            print("✅ Microphone calibrated")

        except Exception as e:
            print(f"⚠️  Voice setup warning: {e}")
            print("💡 Falling back to text input if needed.")

    def speak(self, text):
        """Convert text to speech."""
        print(f"\n🤵 INTERVIEWER: {text}\n" + "-"*50)
        if self.tts_engine:
            try:
                self.tts_engine.say(text)
                self.tts_engine.runAndWait()
            except Exception as e:
                print(f"⚠️  Speech error: {e}")
        time.sleep(0.5)

    def listen_for_speech(self, timeout=20):
        """Listen for speech input; fallback to text if needed."""
        if not self.microphone:
            return self.get_text_input()
        print("\n🎤 LISTENING... speak now")
        try:
            with self.microphone as source:
                audio = self.recognizer.listen(source, timeout=timeout, phrase_time_limit=20)
            print("🔄 Processing speech...")
            try:
                text = self.recognizer.recognize_google(audio)
                print(f"👤 YOU SAID: \"{text}\"")
                return text
            except sr.UnknownValueError:
                return self.get_text_input("Couldn't understand—type your answer: ")
            except sr.RequestError:
                return self.get_text_input("Recognition service error—type your answer: ")
        except (sr.WaitTimeoutError, KeyboardInterrupt):
            return self.get_text_input("No speech—type your answer: ")
        except Exception:
            return self.get_text_input("Microphone error—type your answer: ")

    def get_text_input(self, prompt="Your answer: "):
        """Fallback to keyboard input."""
        try:
            return input(f"\n⌨️  {prompt}").strip()
        except KeyboardInterrupt:
            return "quit"

    def get_ai_response(self, user_input):
        """Send the conversation to OpenRouter/OpenAI and receive response."""
        self.conversation_history.append({"role": "user", "content": user_input})
        payload = {
            "model": self.model,
            "messages": self.conversation_history,
            "temperature": 0.7,
            "max_tokens": 450
        }
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        try:
            print("💭 AI is thinking...")
            resp = requests.post(self.base_url, headers=headers, json=payload, timeout=30)
            if resp.status_code == 200:
                ai_text = resp.json()["choices"][0]["message"]["content"]
                self.conversation_history.append({"role": "assistant", "content": ai_text})
                return ai_text
            else:
                print(f"❌ API Error {resp.status_code}: {resp.text}")
                return "Sorry, technical issues. Let's move on."
        except Exception as e:
            print(f"❌ Connection error: {e}")
            return "Connection issue—continuing interview."

    def setup_interview(self, job_description, resume):
        """Initialize the interview with a system prompt."""
        system_prompt = f"""
You are a professional hiring manager conducting a job interview via voice.

JOB DESCRIPTION:
{job_description}

CANDIDATE RESUME:
{resume}

GUIDELINES:
1. Ask 6–7 questions covering technical and behavioral topics.
2. After each answer, give feedback, a rating out of 10, and improvement tips.
3. Keep questions conversational and concise.

Start with a friendly greeting and first question.
"""
        self.conversation_history = [{"role": "system", "content": system_prompt}]
        return self.get_ai_response("Please start the interview with your first question.")

    def run_interview(self):
        """Main interview loop gathering user info and conducting Q&A."""
        print("\n" + "="*60)
        print("🎯 VOICE-ENABLED AI INTERVIEW PRACTICE")
        print("="*60)

        self.speak("Hello! I'm your AI interviewer. Let's begin practice.")

        jd = input("\n📋 Paste job description (or press Enter for sample):\n").strip() or (
            "Senior Software Developer – 5+ years Python/JS, React, Node.js, AWS"
        )
        if not jd:
            print("(Using sample job description)")

        resume = input("\n📄 Paste your resume summary (or press Enter for sample):\n").strip() or (
            "Alex Doe – 6 years full-stack development with Python, React, AWS; led team of 4"
        )
        if not resume:
            print("(Using sample resume)")

        ai_q = self.setup_interview(jd, resume)
        self.speak(ai_q)

        for i in range(1, 7):
            print(f"\n{'='*40}\nQUESTION {i}/6\n{'='*40}")
            ans = self.listen_for_speech()
            if ans.lower() in ("quit", "exit", "stop"):
                self.speak("Interview ended. Good luck!")
                break
            ai_resp = self.get_ai_response(ans)
            self.speak(ai_resp)
            time.sleep(1)

        if len(self.conversation_history) > 1:
            self.speak("Now, here's your final assessment.")
            final = self.get_ai_response(
                "Please provide a final assessment with strengths, improvements, and overall rating."
            )
            self.speak(final)

        print("\n✅ Interview complete! Review feedback and keep practicing.")

def main():
    try:
        bot = VoiceInterviewBot()
        bot.run_interview()
    except Exception as e:
        print(f"❌ Startup error: {e}")
        print("💡 Ensure you installed: requests, SpeechRecognition, pyttsx3, pyaudio")

if __name__ == "__main__":
    main()
